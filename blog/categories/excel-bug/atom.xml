<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Excel Bug | Mitja Bezenšek]]></title>
  <link href="http://bezensek.com/blog/categories/excel-bug/atom.xml" rel="self"/>
  <link href="http://bezensek.com/"/>
  <updated>2014-07-23T20:02:31+02:00</updated>
  <id>http://bezensek.com/</id>
  <author>
    <name><![CDATA[Mitja Bezenšek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Excel's ActivePane Index Property Bug and a Workaround]]></title>
    <link href="http://bezensek.com/blog/2014/07/23/excel-activepane-index-property-bug-and-a-workaround/"/>
    <updated>2014-07-23T11:20:04+02:00</updated>
    <id>http://bezensek.com/blog/2014/07/23/excel-activepane-index-property-bug-and-a-workaround</id>
    <content type="html"><![CDATA[<p>In <a href="http://zebra.bi/">Zebra BI</a> we are positioning our custom WPF forms on top of the Excel window in order to offer a richer and more contextual UI. Calculating the exact position for the forms is quite complex and painful, due to things like:</p>

<ul>
<li>detecting the Excel window state and left edge position</li>
<li>calculating from points to pixels <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>coping with the Windows DPI</li>
<li>taking Ribbon / Formula Bar / Excel version into consideration</li>
<li>serious lack of events on many of Excel&rsquo;s objects</li>
<li>&hellip;</li>
</ul>


<p>The last nail in the coffin were the Panes which also need to be considered when a user uses the Freeze Panes option, which basically splits the worksheet into 2 or 4 Panes. At first it seemed like a simple adjustment until I started digging into the object model and ultimately found out that:</p>

<!-- more -->


<h1>ActivePane&rsquo;s Index property doesn&rsquo;t work correctly</h1>

<p>According to the <a href="http://msdn.microsoft.com/en-us/library/office/microsoft.office.interop.excel.window.activepane%28v=office.15%29.aspx">Excel Object Model</a> specification the ActivePane property:</p>

<blockquote><p>Returns a <strong>Pane</strong> object that represents the <strong>active pane</strong> in the <strong>window</strong>.</p></blockquote>

<p>and you can:</p>

<blockquote><p>Use the <strong>Index</strong> property to obtain the <strong>index</strong> of the <strong>active pane</strong>.</p></blockquote>

<p>Here is a simple code that is used to display the index of the current ActivePane:</p>

<pre><code class="csharp">var window = Globals.ThisAddIn.Application.ActiveWindow;
var activePane = window.ActivePane;
MessageBox.Show(activePane.Index.ToString());
</code></pre>

<p>Let&rsquo;s see it in action.</p>

<p><img src="/img/ActivePane.gif" title="&lsquo;ActivePane&rsquo; &lsquo;ActivePane&rsquo;" ></p>

<p>As you see when there are 2 panes it <strong>always returns 2</strong> and when we have 4 panes it <strong>always returns 4</strong>. I&rsquo;m guessing it is just returning the number of the panes :)</p>

<h1>The workaround</h1>

<p>I needed to determine in which of the Panes is the current selection so I started looking at the Panes members. The only promising one was the <code>VisibleRange</code>. I didn&rsquo;t want to use the Excel function <code>INTERSECT</code> since is quite costly performance wise. I figured out that just comparing the <code>Left</code> property of the <code>VisibleRange</code> with the <code>Left</code> property of the current selection should be enough (the same for the <code>Top</code> property). So I came up with this:
<code>csharp
private int GetPaneIndex(){
    Range selection = Globals.ThisAddIn.Application.Selection;
    var window = Globals.ThisAddIn.Application.ActiveWindow;
    var paneCount = window.Panes.Count;
    if (paneCount == 2){
        Pane secondPane = window.Panes[2];
        if (secondPane.ScrollRow &gt; 1
          &amp;&amp; secondPane.VisibleRange.Top &lt; selection.Top)
            return 2;   
        if (secondPane.ScrollColumn &gt; 1
          &amp;&amp; secondPane.VisibleRange.Left &lt; selection.Left)
           return 2;   
    }
    else if (paneCount == 4){
        Pane secondPane = window.Panes[2];
        Pane thirdPane = window.Panes[3];
        if (selection.Left &lt; secondPane.VisibleRange.Left
          &amp;&amp; selection.Top &lt; thirdPane.VisibleRange.Top)
           return 1;
        if (selection.Left &gt; secondPane.VisibleRange.Left
          &amp;&amp; selection.Top &gt; thirdPane.VisibleRange.Top)
           return 4;
        if (selection.Left &gt; secondPane.VisibleRange.Left )
           return 2;
        return 3;
     }
     return 1;
}
</code>
This works just fine with <code>Ranges</code> and pretty much every Excel object that has <code>Left</code> and <code>Top</code> properties. You get the correct index of the <code>ActivePane</code>.</p>

<p>However, what you also get, are some triggered events as soon as you access the VisibleRange property. I have no clue why this happens. Even a simple assigment like <code>var range = pane.VisibleRange;</code> causes the active chart to get deactivated, which again caused quite a few additional problems that are beyond the scope of this post.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Since the <code>PointsToScreenPixels</code> method is bugged as well.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
