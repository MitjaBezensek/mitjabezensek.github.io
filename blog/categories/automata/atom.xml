<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automata | Mitja Bezenšek]]></title>
  <link href="http://bezensek.com/blog/categories/automata/atom.xml" rel="self"/>
  <link href="http://bezensek.com/"/>
  <updated>2015-05-08T00:54:09+02:00</updated>
  <id>http://bezensek.com/</id>
  <author>
    <name><![CDATA[Mitja Bezenšek]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deterministic Finite State Machine Minimization]]></title>
    <link href="http://bezensek.com/blog/2015/05/08/deterministic-finite-state-machine-minimization/"/>
    <updated>2015-05-08T00:48:59+02:00</updated>
    <id>http://bezensek.com/blog/2015/05/08/deterministic-finite-state-machine-minimization</id>
    <content type="html"><![CDATA[<p>I have received a question about how to approach DFSM minimization in <a href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/">one of the previous posts</a>. This is an attempt to answer that question.</p>

<h2>What is DFSM minimization?</h2>

<p>First, let us consider what does it mean for two DFSM to be <strong>equivalent</strong>? Imagine having two DFSM that both accept the same input symbols. You then pass all the possible inputs to those two machines. If and only if the answers are the same for all the inputs then the two machines are equivalent. That is: they accept exactly the same inputs, even though their inner workings might not be the same.</p>

<p>This means that there are many equivalent DFSM. For example all three DFSM in the below picture accept the same input which can be written as a regular expression (0+1)<sup>*</sup>.</p>

<p><img src="/img/Equivalence.png" title="&lsquo;Deterministic finite state machine equivalence&rsquo; &lsquo;Deterministic finite state machine equivalence&rsquo;" ></br></p>

<p>The three DFSM vary in the number of states and also in the number of the transitions. Nonetheless, I hope you will agree with me that they all accept the same input.</p>

<!-- more -->


<p>In this example case the machines are simple. But what would happen if the machines were complex - how would we determine if they are equivalent?</p>

<p>The answer is minimization. Minimization <strong>transforms</strong> a machine <strong>into an equivalent machine</strong> that has <strong>minimum number of states</strong>.  We can then easily check if two DFSM are are equivalent. We just need to check if they have the same number of states and if all the transitions are the same.</p>

<h2>Why minimization</h2>

<p>Like I described in the previous paragraph you can use minimization to check the equivalence of the DFSM. Two other benefits (when using DFSM in programming) are:</p>

<ul>
<li>performance increase due to less states and transitions (faster input checking, less memory consumed),</li>
<li>easier reasoning about the minimized machine since it has fewer moving parts.</li>
</ul>


<h2>Two types of states to remove</h2>

<p>When minimizing there are <a href="http://en.wikipedia.org/wiki/DFA_minimization">two types of states</a> that we can either completly remove or merge with other states of the machine:</p>

<blockquote><ul>
<li><strong>unreachable states</strong> are those states that are not reachable from the initial state of the DFA, for any input string,</li>
<li><strong>nondistinguishable states</strong> are those that cannot be distinguished from one another for any input string.</li>
</ul>
</blockquote>

<h2>Unreachable states</h2>

<p>First, let us look at an algorithm for finding the <a href="http://en.wikipedia.org/wiki/DFA_minimization#Unreachable_states">unreachable states</a>. The algorithm starts from the known reachable states which are the start states - the start states are always reachable. It then expands the list of reachable states by adding all the states that can be reached from the start states. It continues this expansion using the newly added states until it cannot add any new states to the list of reachable states. The states of the DFSM that did not end up in the list of reachable states are unreachable.</p>

<p>To me this algorithm feels like flooding the pipes: we have a system of pipes some of which are connected and some of which are not. We open the water and check which pipes did the water reach and which it did not reach.</p>

<p>Below is the algorithm in C#<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>:<br/>
<code>csharp
var reachableStates = new HashSet&lt;string&gt;{Q0};
var newStates = new HashSet&lt;string&gt;{Q0};
do{
    var temp = new HashSet&lt;string&gt;();
    foreach (var q in newStates){
        foreach (var c in Sigma){
            var transition = Delta.Find(t =&gt; t.StartState == q &amp;&amp;
                                             t.Symbol == c);
            if (transition != null){
                temp.Add(transition.EndState);
            }
        }
    }
    temp.ExceptWith(reachableStates);
    newStates = temp;
    reachableStates.UnionWith(newStates);
} while (newStates.Count &gt; 0);
var unreachableStates = Q.Where(q =&gt; !reachableStates.Contains(q));
</code>
The part of the algorithm that finds the possible transitions from the new states is quite inefficient. For each new state it tries all the symbols from <code>sigma</code>. This causes us to loop over all the transitions for every symbol and every new state. A better solution is shown below. In it we are just selecting all the states that are reachable from the current state:</p>

<pre><code class="csharp">foreach (var q in newStates){
    var reachableFromQ = Delta.FindAll(t =&gt; t.StartState == q)
                              .Select(t =&gt; t.EndState);
    temp.UnionWith(reachableFromQ);
}
</code></pre>

<p>Now that we have found all the unreachable states we can remove them (along with transitions to and from them):</p>

<pre><code class="csharp">for (int i = Delta.Count - 1; i &gt;= 0; i--){
    var transition = Delta[i];
    if (unreachableStates.Contains(transition.EndState) ||
        unreachableStates.Contains(transition.StartState)){
        Delta.Remove(transition);
    }
}
foreach (var unreachableState in unreachableStates){
    Q.Remove(unreachableState);
}
</code></pre>

<h2>Nondistinguishable states</h2>

<p>And now for the hard part - the nondistinguishable states. Here, we will use <a href="http://en.wikipedia.org/wiki/DFA_minimization#Brzozowski.27s_algorithm">Brzozowski&rsquo;s algorithm for minimization</a>, which works like this:</p>

<blockquote><p>Reversing the edges of a DFA produces a non-deterministic finite automaton (NFA) for the reversal of the original language, and converting this NFA to a DFA using the standard powerset construction (constructing only the reachable states of the converted DFA) leads to a minimal DFA for the same reversed language. Repeating this reversal operation a second time produces a minimal DFA for the original language.</p></blockquote>

<p>To implement the described algorithm we will need the following:</p>

<ol>
<li>an algorithm that reverses a DFSM and produces a corresponding NDFSM,</li>
<li>an algorithm for powerset construction (this algorithm converts a given NDFSM into an equivalent DFSM)</li>
<li>an algorithm for detecting and removing unreachable states (see above).</li>
</ol>


<h3>Reversing a DFSM</h3>

<p>The algorithm for reversing a DFSM is quite easy to implement and is presented below <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:
<code>csharp
private NDFSM Reverse(DFSM d){
    var delta = new List&lt;Transition&gt;();
    foreach (var transition in d.Delta) {
        delta.Add(new Transition(transition.EndState,
                                 transition.Symbol,
                                 transition.StartState));
    }
    return new NDFSM(d.Q, d.Sigma, delta, d.F, d.Q0);
}
</code></p>

<h3>Powerset construction</h3>

<p>Here is <a href="http://bezensek.com/blog/2015/04/30/powerset-construction/">how I implemented the powerset constructions</a> algorithm in my previous post<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</p>

<pre><code class="csharp"> private static DFSM PowersetConstruction(NDFSM ndfsm){
     var Q = new List&lt;string&gt;();
     var Sigma = ndfsm.Sigma.ToList();
     var Delta = new List&lt;Transition&gt;();
     var Q0 = new List&lt;string&gt; { string.Join(" ", ndfsm.Q0) };
     var F = new List&lt;string&gt;();

     var processed = new List&lt;string&gt;();
     var queue = new Queue&lt;string&gt;();
     queue.Enqueue(string.Join(",", ndfsm.Q0));

     while (queue.Count &gt; 0){
        var setState = queue.Dequeue();
        processed.Add(setState);
        Q.Add(CleanupState(setState));

        var statesInCurrentSetState = setState.Split(',').ToList();
        foreach (var state in statesInCurrentSetState){
           if (ndfsm.F.Contains(state)){
              F.Add(CleanupState(setState));
              break;
           }
        }
        var symbols = ndfsm.Delta
           .Where(t =&gt; statesInCurrentSetState.Contains(t.StartState))
           .Select(t =&gt; t.Symbol)
           .Distinct();
        foreach (var symbol in symbols){
           var reachableStates =
              ndfsm.Delta
                 .Where(t =&gt; t.Symbol == symbol &amp;&amp;
                             statesInCurrentSetState.Contains(t.StartState))
                 .OrderBy(t =&gt; t.EndState).
                 Select(t =&gt; t.EndState);
           var reachableSetState = string.Join(",", reachableStates);

           Delta.Add(new Transition(
                                    CleanupState(setState), 
                                    symbol, 
                                    CleanupState(reachableSetState)));

           if (!processed.Contains(reachableSetState)){
              queue.Enqueue(reachableSetState);
           }
        }
     }
     return new DFSM(Q, Sigma, Delta, Q0, F);
  }

  private static string CleanupState(string state){
     return state.Replace(",", " ");
  }
</code></pre>

<h3>Putting it all together</h3>

<p>Now that we have all the pieces we can combine them into Brzozowski&rsquo;s  algorithm:</p>

<pre><code class="csharp"> public static DFSM MinimizeDFSM(DFSM fsm){
   var reversedNDFSM = Reverse(fsm);
   var reversedDFSM = PowersetConstruction(reversedNDFSM);
   reversedDFSM.RemoveUnreachableStates();
   var NDFSM = Reverse(reversedDFSM);
   var DFSM = PowersetConstruction(NDFSM);
   DFSM.RemoveUnreachableStates();
   return DFSM;
}
</code></pre>

<p>If you check the powerset construction algorithm (or read my previous post) you can see that the implementation has the nice property that it constructs a DFSM with only reachable states. Which is why we can remove the two calls to <code>RemoveUnreachableStates</code> method. The final algorithm:</p>

<pre><code class="csharp">public static DFSM MinimizeDFSM(DFSM fsm){
   var reversedNDFSM = Reverse(fsm);
   var reversedDFSM = PowersetConstruction(reversedNDFSM);
   var NDFSM = Reverse(reversedDFSM);
   return PowersetConstruction(NDFSM);
}
</code></pre>

<p>And lets see how the minimization works on an example. This is how the four steps of the above minimization look like on the third DFSM from the beginning .</p>

<p><img src="/img/Minimization.png" title="&lsquo;Deterministic finite state minimization 'Deterministic finite state machine minimization&rsquo;" ></br></p>

<p>So this is it for minimization. The source code can be found at <a href="https://github.com/MitjaBezensek/DFSM_Minimization">github</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>You might want to check <a href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/">one of my previous articles</a> to check the DFSM implementation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If you read my previous article you might be wondering if those implementations will work with this reversal. The answer is no. The problem is that when we reverse a DFSM we are basically converting starting state to finish state and finish states to starting states. Which means there can be many starting states - a variant of the DFSM that my implementation does not cover. <a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>With a few minor adjustements.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powerset Construction in C#]]></title>
    <link href="http://bezensek.com/blog/2015/04/30/powerset-construction/"/>
    <updated>2015-04-30T15:58:59+02:00</updated>
    <id>http://bezensek.com/blog/2015/04/30/powerset-construction</id>
    <content type="html"><![CDATA[<p>In the last two articles I have implemented the <a href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/">deterministic finite state machine</a> (DFSM) and the <a href="http://bezensek.com/blog/2015/04/12/non-deterministic-finite-state-machine-implementation-in-c-number/">non-deterministic finite state machine</a> (NDFSM). As you probably all know the two variants are equivalent in terms of power; that is everything that can be expressed with one can also be expressed with the other. This may come as a surprise when you first hear about it, but you are soon presented with the <strong><a href="http://en.wikipedia.org/wiki/Powerset_construction">powerset construction</a></strong> which converts a NDFSM into a DFSM and thus proves one part of the equivalence. The other part is trivial since DFSM is only a limited NDFSM.</p>

<!-- more -->


<h2>Powerset construction algorithm</h2>

<p>Like I discussed in my <a href="http://bezensek.com/blog/2015/04/12/non-deterministic-finite-state-machine-implementation-in-c-number/">previous blog post</a>, the only difference between the DFSM and the NDFSM is that the DFSM does not allow multiple transitions for a given state and symbol. If we wish to transform a NDFSM into a DFSM we need to remove these multiple transitions. We can achieve this by combining all the states that we can reach with a given symbol from a given state into a new state which is a set of all the reachable states.</p>

<p><img src="/img/PowersetConstruction.png" title="&lsquo;Powerset construction&rsquo; &lsquo;Powerset construction&rsquo;" ></br></p>

<p>As you can see on the left side of the above picture we can reach states <code>q1</code> and <code>q2</code> from the state <code>q0</code> using the symbol <code>a</code>. This means that the state <code>q0</code> has multiple transitions defined for the symbol <code>a</code> and we wish to get rid of these multiple transitions. The powerset construction combines states <code>q1</code> and <code>q2</code> into a new state that is the set of these two states as can be seen on the right side of the picture. The new state is denoted as <code>{q1, q2}</code>. When we do this transformation for the combined states, like the <code>{q1, q2}</code>, we need to look at the transitions for all the states that make this combined state, in this case <code>q1</code> and <code>q2</code>.</p>

<p>The good news is that this does exactly what we need: it gets rid of the multiple transitions. The bad news though is that in the worst case the number of states explodes and we end up with the states that are all the possible subsets of our original set of states.</p>

<p>Ouch.</p>

<p>So how would we approach this constructions programmatically? Probably the easiest way would be to keep a queue of states that we wish to process. The initial queue would only contain the starting states. We would then add all the possible states that are reachable from the starting states. If there are multiple transitions from a state with a given symbol we would create a new <strong>combined state</strong> like described in the previous paragraph and add it to the queue. For the symbols that only have one transition we would just add the ending state of the transition to the queue. We would then remove a state from the queue and repeat the described algorithm until we empty the queue.</p>

<p>Determining the finish states of the DFSM machine is easy. The finish states will be all the finish states of the original NDFSM plus the combined states that have a least one of the finish states as one of their elements.</p>

<p>During the execution of the algorithm we would of course need to keep track of the already processed states and the transitions between them so that we can construct our NDFSM.</p>

<p>Here is one possible implementation:</p>

<pre><code class="csharp">public static DFSM Convert(NDFSM nd){
    var Q = new List&lt;string&gt;();
    var Sigma = nd.Sigma.ToList();
    var Delta = new List&lt;Transition&gt;();
    var Q0 = nd.Q0.ToList();
    var F = new List&lt;string&gt;();

    var processed = new List&lt;string&gt;();
    var queue = new Queue&lt;string&gt;(Q0);
    while (queue.Count &gt; 0){
       var setState = queue.Dequeue();
       processed.Add(setState);
       Q.Add(setState);

        var statesInCurrentSetState = setState.Split(',').ToList();
        foreach (var state in statesInCurrentSetState){
            if (nd.F.Contains(state)){
                F.Add(setState);
                break;
           }
        }
        var symbols = nd.Delta
           .Where(t =&gt; statesInCurrentSetState.Contains(t.StartState))
           .Select(t =&gt; t.Symbol)
           .Distinct();
        foreach (var symbol in symbols){
           var reachableStates =
              nd.Delta
                 .Where(t =&gt; t.Symbol == symbol &amp;&amp;
                             statesInCurrentSetState.Contains(t.StartState))
                 .OrderBy(t =&gt; t.EndState)
                 .Select(t =&gt; t.EndState);
           var reachableSetState = string.Join(",", reachableStates);

           Delta.Add(new Transition(setState, symbol, reachableSetState));

           if (!processed.Contains(reachableSetState)){
              queue.Enqueue(reachableSetState);
           }
        }
    }
    return new DFSM(Q, Sigma, Delta, Q0, F);
}
</code></pre>

<h2>Conclusion</h2>

<p>This algorithm was actually easier to implement than I thought. I thought that I would need to generate the powerset and then all the possible transitions between all the states. I took a different approach which only goes through the reachable states and only generates the states of the powerset that are actually needed. The algorithm turned out much simpler and on top of that it also produces a better results since the unreachable states are pruned away!</p>

<p>The source code is available at <a href="https://github.com/MitjaBezensek/PowersetConstruction">Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-deterministic Finite State Machine Implementation in C#]]></title>
    <link href="http://bezensek.com/blog/2015/04/12/non-deterministic-finite-state-machine-implementation-in-c-number/"/>
    <updated>2015-04-12T22:35:00+02:00</updated>
    <id>http://bezensek.com/blog/2015/04/12/non-deterministic-finite-state-machine-implementation-in-c-number</id>
    <content type="html"><![CDATA[<p><a href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/">Last time</a> I implemented the deterministic finite state machine (DFSM). This time I will do the same for the non-deterministic (NDFSM) one. I chose the variation without the <code>epsilon</code> transitions and will leave that for exercise if someone might find it intriguing.</p>

<p>The only difference between the DFSM and NDFSM is that while the DFSM can only have a single transition for a given state and input symbol the NDFSM is not limited in that regard. It can have multiple transitions for a given state and input symbol.</p>

<!-- more -->


<p>With multiple possible next moves we get the non-deterministic way of operating. This is usualy depicted as a &ldquo;magic wand&rdquo; that correctly decides which transition to choose when multiple options are available. Unfortunatelly for us programmers we don&rsquo;t have that magic wand. We need to try all the possible options before we can answer wheater the NDFSM accepts the input or not. My first thought when seeing something like this is <a href="https://en.wikipedia.org/wiki/Backtracking">backtracking</a>:</p>

<ul>
<li>pick one of the possible transitions,</li>
<li>if it leads to the solution great,</li>
<li>if not backtrack and try something else.</li>
</ul>


<p>But let us not get ahead of ourselves. Let us start with something simpler.</p>

<h1>Valid transitions</h1>

<p>With the before discussed difference in mind I looked at the DFSM implementation to see what will I need to change (If you didn&rsquo;t read the <a href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/">previous article</a> this would be a good time, since I will mostly skip the parts that will remain the same and only focus on the differences. And even if you have already read it, it might help to have another window opened with the <a href="https://github.com/MitjaBezensek/DFSM/blob/master/FSM_Simple/DeterministicFSM.cs">source code</a> of the solution.).</p>

<p>One of the first things I noticed was the logic that checks the validity of transitions. We no longer need to check if a similar transition has already been defined, so we can remove that part:
``` csharp</p>

<p>private bool ValidTransition(Transition transition){
    return  Q.Contains(transition.StartState) &amp;&amp;
            Q.Contains(transition.EndState) &amp;&amp;
            Sigma.Contains(transition.Symbol);
}
<code>``
All the other validation logic can remain the same. Which brings us to the biggest change: the</code>Accepts` method.</p>

<h1>Non-deterministic Accept</h1>

<p>Like I already mentioned above the non-determinism often looks like magic. This kind of behavior is usually implemented by recursive backtracking. Let us look at a high level overview of the method:</p>

<ul>
<li>find all the posible transitions from the current state using the current symbol,</li>
<li>recursively select one transition and try to accept the remaining input by using that transition,</li>
<li>if we managed to read the whole input and ended up in a final state, accept the input,</li>
<li>if the state is not final or no transitions are possible, backtrack and select a different transition.</li>
</ul>


<p>First, we need a method that will start our recursive calls. The logic here is a bit different than in the deterministic case where we could easily determine if the input is not accepted:</p>

<ul>
<li>there was no valid transition for current state and symbol symbol or</li>
<li>we read all the input and ended up in a non finite state.</li>
</ul>


<p>For the non-deterministic case we need to do that for all the possible transitions from a given state and symbol. And we should start this from the starting state and the whole input:
``` csharp
public void Accepts(string input){
    ConsoleWriter.Success(&ldquo;Trying to accept: &rdquo; + input);</p>

<pre><code>if (Accepts(Q0, input, new StringBuilder())){
    return;
}
ConsoleWriter.Failure("Could not accept the input: " + input);
</code></pre>

<p>}
<code>
Next we need to write the recursive function that checks if there is any sequence of steps that leads from the current state to the final state using the specified input:
</code> csharp
private bool Accepts(string currentState, string input, StringBuilder steps){
    if (input.Length > 0){
        var transitions = GetAllTransitions(currentState, input[0]);
        foreach (var transition in transitions){
            var currentSteps = new StringBuilder(steps.ToString() + transition);
            if (Accepts(transition.EndState, input.Substring(1), currentSteps)){
                return true;
            }
        }
        return false;
    }
    if (F.Contains(currentState)){
        ConsoleWriter.Success(&ldquo;Successfully accepted the input &rdquo; + input + &ldquo; &rdquo; +
                               &ldquo;in the final state &rdquo; + currentState +
                               &ldquo; with steps:\n&rdquo; + steps);
        return true;
    }
    return false;
}
```</p>

<p>If there are more symbols to read we find all the possible transitions for the current state and current symbol. We then recursively try each of these transitions by calling the <code>Acecepts</code> method on the <code>EndState</code> of the transition with the remaining input. The remaining input here is the current input except for the first symbol which we used in the transition. We also need to add the current transition to the steps. For that I created a new <code>StringBuilder</code> or we would add some transitions that did not lead to the solution in the <code>foreach</code> loop.</p>

<p>The recursion stops when we either tried all the transitions and none of them worked. Or if we came to the end of the input in which case we accept the input only if we stoped in a finish state.</p>

<p>The only thing remaining is the <code>GetAllTransitions</code> method which simply goes through all transitions and finds the ones with the specified start state and symbol:</p>

<pre><code class="csharp">private IEnumerable&lt;Transition&gt; GetAllTransitions(string currentState, char symbol){
    return Delta.FindAll(t =&gt; t.StartState == currentState &amp;&amp;
                         t.Symbol == symbol);
}
</code></pre>

<h1>Conclusion</h1>

<p>While the difference between the DFSM and NDFSM is quite small on paper their algorithms are quite different. Reading the input in the case of DFSM proceeds in linear fashion, we are always reducing the number of symbols we still need to read. But for NDFSM this is not the case. We might read all the input but not finish in the end state and then backtrack back to the begining with whole input left to read. This also makes the NDFSM algorithm perform much slower.</p>

<p>Also the implementation above is not really the best when it comes to performance. We are calling the <code>GetAllTransitions</code> method over and over again. A better way would be to store the possible transitions so that we don&rsquo;t have go through all the transitions every time. But I&rsquo;ll leave this to the readers (as well as implementing <a href="http://en.wikipedia.org/wiki/Nondeterministic_finite_automaton_with_%CE%B5-moves"><code>epsilon</code> transitions</a>).</p>

<p>You can find the <a href="https://github.com/MitjaBezensek/NDFSM">source code</a> for NDFSM on github.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deterministic Finite State Machine Implementation in C#]]></title>
    <link href="http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number/"/>
    <updated>2014-08-13T21:36:58+02:00</updated>
    <id>http://bezensek.com/blog/2014/08/13/deterministic-finite-state-machine-implementation-in-c-number</id>
    <content type="html"><![CDATA[<p>While I was working at the <a href="http://www.fri.uni-lj.si/en/">Faculty of Computer and Information Science</a> I have implemented many of the standard algorithms from the famous Cormen&rsquo;s <a href="http://www.amazon.com/gp/product/0262033844/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=bezensek-20&amp;linkId=EL57QKBNM5BB373B">Introduction to Algorithms</a>. Since I was a part of the Laboratory for algorithms and data structures that is to be expected. However, I have never implemented many of the great results from the Theory of Computation.</p>

<p>This is why I decided to implement the finite state machine and the Turing machine in C# as an exercise. In this blog post I will start with the easier of the two, the <a href="http://en.wikipedia.org/wiki/Automata_theory">finite state machine (FSM)</a>.</p>

<!-- more -->


<h2>Programming by wishful thinking</h2>

<p>I will not bore you with the theory, since you can read all about it in the <a href="http://en.wikipedia.org/wiki/Automata_theory">wikipedia article</a>, which explains the logic behind FSM better than I ever could. So I will just start with <a href="http://dsoguy.blogspot.com/2007/01/programming-by-wishful-thinking.html">programming by wishful thinking</a>. This is how I would like to consume an implementation of a deterministic FSM (DFSM):</p>

<pre><code class="csharp">    // Declaration
    var Q = new List&lt;string&gt;{"q0", "q1", "q2"};
    var Sigma = new List&lt;char&gt;{'a'};
    var Delta = new List&lt;Transition&gt;{
        new Transition("q0", 'a', "q1"),
        new Transition("q1", 'a', "q2"),
        new Transition("q2", 'a', "q1")
    };
    var Q0 = "q0";
    var F = new List&lt;string&gt;{"q0", "q2"};
    var dFSM = new DeterministicFSM(Q, Sigma, Delta, Q0, F);
</code></pre>

<p>As you can see I define the five components that make a DFSM: the states of the machine <code>Q</code>, the alphabet <code>Sigma</code>, the list of transitions <code>Delta</code>, the start state <code>Q0</code>, and the set of finish states <code>F</code>. I then construct the machine by passing the components to the constructor.</p>

<p>I expect the upper definition to construct the FSM that is visible on the image below. As you can see the machine accepts all the words with an even number of &ldquo;a&rdquo; characters.</p>

<p><img src="/img/FSM.png" title="&lsquo;Finite state machine&rsquo; &lsquo;Finite state machine&rsquo;" ></p>

<p>After constructing the machine we wish to test if some input is a part of the machine&rsquo;s language:</p>

<pre><code class="csharp">    // Asking the machine if certain inputs are a part of it's language
    dFSM.Accepts("");
    dFSM.Accepts("a");
    dFSM.Accepts("aa");
</code></pre>

<p>I want the <code>Accept</code> method to print out if the machine accepted the input or not. Also I would like to see the steps that led to the finish state if the input was accepted.</p>

<h2>Transitions</h2>

<p>With that, I had all the specification I needed, so I started by implementing the first thing the compiler complained about: the  <code>Transition</code> object.</p>

<p>The transitions define how we can move between the states. So the <code>Transition</code> class needs to hold the information about the <code>StartState</code>, the <code>Symbol</code> and the <code>EndState</code> of the transition. Appart from that I added a <code>ToString()</code> method that will be used later on.</p>

<pre><code class="csharp">    public class Transition{
        public string StartState { get; private set; }
        public char Token { get; private set; }
        public string EndState { get; private set; }

        public Transition(string startState, char token, string endState){
            StartState = startState;
            Token = token;
            EndState = endState;
        }

        public override string ToString(){
            return string.Format("({0}, {1}) -&gt; {2}", StartState, Symbol, EndState);
        }
    }
</code></pre>

<h2>Deterministic finite state machine</h2>

<p>Now that we have the <code>Transition</code>, we can start implementing the machine. Here is how the constructor might look like:</p>

<pre><code class="csharp">    public class DeterministicFSM{
        private readonly List&lt;string&gt; Q = new List&lt;string&gt;();
        private readonly List&lt;char&gt; Sigma = new List&lt;char&gt;();
        private readonly List&lt;Transition&gt; Delta = new List&lt;Transition&gt;();
        private string Q0;
        private readonly List&lt;string&gt; F = new List&lt;string&gt;();

        public DeterministicFSM(IEnumerable&lt;string&gt; q, IEnumerable&lt;char&gt; sigma, 
                                IEnumerable&lt;Transition&gt; delta, string q0, 
                                IEnumerable&lt;string&gt; f){
            Q = q.ToList();
            Sigma = sigma.ToList();
            AddTransitions(delta);
            AddInitialState(q0);
            AddFinalStates(f);
        }
    }
</code></pre>

<p>I just copied the list of states and the alphabet to the internal properties, but for the other three components we need some basic validation. For the transitions we want to verify that:</p>

<ul>
<li>they connect the states that are defined in <code>Q</code>,</li>
<li>they use only symbols from <code>Sigma</code>.</li>
</ul>


<p>There is an additional constraint with deterministic machine and that is: each state can only have one transition for a given symbol.</p>

<p>Considering all the requirements this is how the <code>AddTransitions</code> method might look like:</p>

<pre><code class="csharp">    private void AddTransitions(IEnumerable&lt;Transition&gt; transitions){
        foreach (var transition in transitions.Where(ValidTransition)){
            Delta.Add(transition);
        }
    }

    private bool ValidTransition(Transition transition){
        return  Q.Contains(transition.StartState) &amp;&amp;
                Q.Contains(transition.EndState)   &amp;&amp;
                Sigma.Contains(transition.Symbol) &amp;&amp;
                !TransitionAlreadyDefined(transition);
      }

     private bool TransitionAlreadyDefined(Transition transition){
        return Delta.Any(t =&gt; t.StartState == transition.StartState &amp;&amp;
                              t.Symbol == transition.Symbol);
     }
</code></pre>

<p>The validations for the start state and the finish states are much simpler. We only need to check if they are defined in Q:</p>

<pre><code class="csharp">    private void AddInitialState(string q0){
        if (Q.Contains(q0)){
            Q0 = q0;
        }
    }

    private void AddFinalStates(IEnumerable&lt;string&gt; finalStates){
        foreach (var finalState in finalStates.Where(
                     finalState =&gt; Q.Contains(finalState))){
            F.Add(finalState);
        }
    }
</code></pre>

<h2>Accepting the inputs</h2>

<p>That brings us to the meat of our DFSM implementation: the <code>Accepts</code> method. We will need to do the following:</p>

<ul>
<li>read the input symbol by symbol,</li>
<li>try to find a transition from the current state that uses the current symbol,</li>
<li>move to the next state defined by the found transition,</li>
<li>if we have read all the symbols and have ended up in one of the finish states we can accept the input,</li>
<li>in all other cases (no transition possible, ending up in non finish states) we don&rsquo;t accept the input.</li>
</ul>


<p>The upper pseudo algorithm is implemented below. The main logic is in the foreach loop that reads the next symbol and tries to transition to the next state. If the transition is successful it records the current step in the steps variable. I have also added a simple <code>ConsoleWriter</code> class that deals with simple print outs to the console.</p>

<pre><code class="csharp">    public void Accepts(string input) {
        var currentState = Q0;
        var steps = new StringBuilder();
        foreach (var symbol in input.ToCharArray()) {
            var transition = Delta.Find(t =&gt; t.StartState == currentState &amp;&amp;
                                             t.Symbol == symbol);
            if (transition == null) {
                ConsoleWriter.Failure("No transitions for current state and symbol");
                ConsoleWriter.Failure(steps);
               return;
            }
            currentState = transition.EndState;
            steps.Append(transition + "\n");
        }
        if (F.Contains(currentState)) {
            ConsoleWriter.Success("Accepted the input with steps:\n" + steps);
            return;
        }
        ConsoleWriter.Failure("Stopped in state " + currentState + 
                               " which is not a final state.");
        ConsoleWriter.Failure(steps);        
    }
</code></pre>

<h2>Conclusion</h2>

<p>I have omitted some additional validations and the code behind the <code>ConsoleWriter</code> for the sake of brevity, but the full source code can be found at <a href="https://github.com/MitjaBezensek/DFSM">GitHub</a>.</p>

<p>Building the DFSM was quite fun! I have already implemented the non-deterministic one as well and will present it in one of the coming posts, and for sure I&rsquo;ll do the Turing machine as well.</p>

<p>Before I say goodbye let me show you a test run of the DFSM on the following inputs:
<code>csharp
    dFSM.Accepts("");
    dFSM.Accepts("a");
    dFSM.Accepts("aa");
    dFSM.Accepts("aaa");
    dFSM.Accepts("aaaa");
</code>
<img src="/img/Output.png" title="&lsquo;Finite state machine output&rsquo; &lsquo;Finite state machine output&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
